// Generated by CoffeeScript 2.5.1
var canvas, canvasDOM, ctx, generate;

import defaultSettings from "./defaultGlobalSettings.js";

window.siteSettings = defaultSettings;

import "./menu.js";

import {
  drawRectangleRandomly,
  drawCircleRandomly
} from "./shapes.js";

canvasDOM = document.getElementById("canvas");

ctx = canvasDOM.getContext("2d");

canvas = ctx.canvas;


// chances = [100, 100, 100] # TODO:

// randexec = (chances) ->
//   ar = chances.map((percentage) => percentage / 100.0) 

//   r = Math.random()  # returns [0,1]

//   result = [] 
//   ar.forEach((el, i) => el >= r and result.push(palette[i])) 
//   return result 
generate = function() {
  var colors, i, ref, temp, times, x;
  $("#canvas").attr("height", window.siteSettings.resolution.height);
  $("#canvas").attr("width", window.siteSettings.resolution.width);
  ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear canvas
  ctx.fillStyle = window.siteSettings.mainPalette.color0;
  ctx.fillRect(0, 0, canvas.width, canvas.height); // BGR
  times = window.siteSettings.shapes.amount;
  
  // colors = randexec(chances) # TODO:
  colors = Object.values(window.siteSettings.mainPalette).slice(1);
  temp = function() {
    var color;
    color = colors[~~(Math.random() * colors.length)];
    switch (window.siteSettings.shapes.type) {
      case "rectangles":
        return drawRectangleRandomly(color);
      case "circles":
        return drawCircleRandomly(color);
    }
  };
  for (x = i = 1, ref = times; (1 <= ref ? i <= ref : i >= ref); x = 1 <= ref ? ++i : --i) {
    temp();
  }
};

// Generate on ENTER
window.addEventListener("keypress", function(ev) {
  if (ev.key.toLowerCase() === "enter") {
    return generate();
  }
});

// TODO:
// $(".color-chance").on("input", () -> 
//   indexItem = $(this).attr("data-color") 
//   value = $(this).val() 
//   chances[indexItem] = value 
//   $("#color-chance-label-#{indexItem} p").text(value + "%") 
// ) 
$("#generate-new").click(generate);

// TODO: 
//  - manually change the variation in size of shapes
//  - Fit the whole canvas without overflow
//  - fix the % chance of each shape being generated
generate();
